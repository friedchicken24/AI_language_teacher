# final_teacher.py - PHI√äN B·∫¢N S·ª¨A L·ªñI CU·ªêI C√ôNG (Whisper + Ph·∫£n h·ªìi √¢m thanh)
import os
import soundfile as sf
import sounddevice as sd    
from groq import Groq
from TTS.api import TTS
import numpy as np
import whisper

# --- PH·∫¶N 1: C√ÄI ƒê·∫∂T C√ÅC D·ªäCH V·ª§  ---

# 1.1. C√†i ƒë·∫∑t "B·ªô N√£o" - Groq
try:
    # NH·ªö THAY API KEY C·ª¶A B·∫†N V√ÄO ƒê√ÇY
    groq_client = Groq(api_key="")
    print("‚úÖ K·∫øt n·ªëi t·ªõi Groq (B·ªô n√£o) th√†nh c√¥ng.")
except Exception as e:
    print(f"‚ùå L·ªñI: Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Groq. {e}")
    exit()

# 1.2. C√†i ƒë·∫∑t "Gi·ªçng N√≥i" - Coqui TTS
try:
    print("   ƒêang t·∫£i m√¥ h√¨nh gi·ªçng n√≥i... (C√≥ th·ªÉ m·∫•t v√†i ph√∫t)")
    tts_model = TTS(model_name="tts_models/en/ljspeech/vits", progress_bar=True).to(device)
    print("‚úÖ M√¥ h√¨nh gi·ªçng n√≥i ƒë√£ s·∫µn s√†ng.")
except Exception as e:
    print(f"‚ùå L·ªñI: Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh TTS. {e}")
    exit()

# 1.3. C√†i ƒë·∫∑t "ƒê√¥i Tai" - Whisper v√† Microphone
try:
    print("   ƒêang t·∫£i m√¥ h√¨nh Whisper... (C√≥ th·ªÉ m·∫•t v√†i ph√∫t)")
    whisper_model = whisper.load_model("base")
    print("‚úÖ M√¥ h√¨nh Whisper ƒë√£ s·∫µn s√†ng.")
    print("   ƒê·∫£m b·∫£o microphone ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi v√† ho·∫°t ƒë·ªông.")
    print("   B·∫°n c√≥ th·ªÉ n√≥i ti·∫øng Anh ho·∫∑c ti·∫øng ƒê·ª©c.")
except Exception as e:
    print(f"‚ùå L·ªñI: Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh Whisper. {e}")
    exit()

# --- PH·∫¶N 2: THI·∫æT L·∫¨P VAI TR√í GI√ÅO VI√äN ---
system_prompt = """
You are a multilingual language teacher named Alex. You are an expert in both English and German.
Your student will practice with you. Your main goal is to be helpful and encouraging.
- When the student writes in English, respond as an English teacher.
- When the student writes in German, respond as a German teacher.
- If the student makes a mistake in either language, gently correct it. First, show the corrected sentence. Then, briefly and simply explain the mistake in Vietnamese.
- Always be positive and keep the conversation natural.
"""
conversation_history = [{"role": "system", "content": system_prompt}]

# --- PH·∫¶N 3: M·ªòT V√íNG L·∫∂P DUY NH·∫§T ---

print("\n--- Tui l√† ƒê·ª©c Anh - Gi√°o vi√™n ng√¥n ng·ªØ (D·ª©c - Anh) c·ªßa b·∫°n ---")
print("Nh·∫•n Enter, n√≥i chuy·ªán v·ªõi tui, r·ªìi ch·ªù k·∫øt qu·∫£ nh√©. N√≥i 'quit' ho·∫∑c 'tho√°t' ƒë·ªÉ d·ª´ng l·∫°i.")
print("-" * 40)

while True:
    input("=> Nh·∫•n Enter ƒë·ªÉ b·∫Øt ƒë·∫ßu n√≥i...")
    print("üé§ B·ªì n√≥i ƒëi, Tui ƒëang nghe n√®...")

    # Ghi √¢m tr·ª±c ti·∫øp b·∫±ng sounddevice
    duration = 5  # s·ªë gi√¢y ghi √¢m, c√≥ th·ªÉ ch·ªânh t√πy √Ω
    fs = 16000
    audio = sd.rec(int(duration * fs), samplerate=fs, channels=1)
    sd.wait()
    sf.write("temp.wav", audio, fs)

    print("ü§î Ch·ªù tui x√≠u nha, ƒëang x·ª≠ l√Ω...")

    # Nh·∫≠n di·ªán b·∫±ng Whisper
    try:
        result = whisper_model.transcribe("temp.wav", language=None)
        user_text = result["text"].strip()

        if not user_text:
            print("üëÇ H√¨nh nh∆∞ b·ªì ch∆∞a n√≥i g√¨ c·∫£. Th·ª≠ l·∫°i nh√©.")
            continue

        print(f"B·ªì n√≥i: {user_text}")
    except Exception as e:
        print(f"L·ªói khi nh·∫≠n d·∫°ng gi·ªçng n√≥i: {e}")
        continue

    # 3. X·ª≠ l√Ω logic tr√≤ chuy·ªán
    if "quit" in user_text.lower() or "tho√°t" in user_text.lower():
        break

    conversation_history.append({"role": "user", "content": user_text})

    try:
        # 4. Groq t·∫°o ra c√¢u tr·∫£ l·ªùi
        completion = groq_client.chat.completions.create(
            model="kimi-k2", 
            messages=conversation_history
        )
        ai_response_text = completion.choices[0].message.content
        
        print(f"ƒê·ª©c Anh (text): {ai_response_text}")
        conversation_history.append({"role": "assistant", "content": ai_response_text})

        # ==================================================================
        # PH·∫¶N PH·∫¢N H·ªíI √ÇM THANH C·ª¶A AI 
        # ==================================================================
        print("ƒê·ª©c Anh (voice): ...speaking...")
        
        # 5. TTS chuy·ªÉn vƒÉn b·∫£n th√†nh d·ªØ li·ªáu √¢m thanh
        #    H√†m tts() tr·∫£ v·ªÅ m·ªôt list c√°c s·ªë float ƒë·∫°i di·ªán cho s√≥ng √¢m.
        wav_data = tts_model.tts(text=ai_response_text)
        
        # 6. D√πng sounddevice ƒë·ªÉ ph√°t tr·ª±c ti·∫øp
        sample_rate = getattr(tts_model, "output_sample_rate", 22050)
        sd.play(np.array(wav_data), sample_rate)
        sd.wait() # Ch·ªù cho ƒë·∫øn khi ph√°t xong
        # ==================================================================

    except Exception as e:
        print(f"‚ùå An error occurred during conversation: {e}")
        conversation_history.pop()

# L·ªùi ch√†o t·∫°m bi·ªát cu·ªëi c√πng
final_goodbye_text = "T·∫°m bi·ªát b·ªì nha! H·∫πn g·∫∑p l·∫°i l·∫ßn sau nh√©."
print(f"\nƒê·ª©c Anh (text): {final_goodbye_text}")
wav_data = tts_model.tts(text=final_goodbye_text)
sample_rate = getattr(tts_model, "output_sample_rate", 22050)
sd.play(np.array(wav_data), sample_rate)
sd.wait()